generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int      @id @default(autoincrement())
  phone         String   @unique
  password      String
  walletBalance Float    @default(0)
  createdAt     DateTime @default(now())
  agents        Agent[]

  @@index([phone])
}

model Agent {
  id              Int       @id @default(autoincrement())
  phone           String    @unique
  name            String
  password        String
  walletBalance   Float     @default(0)
  debtBalance     Float     @default(0)
  adminPercentage Float     @default(20)
  autoLock        Boolean   @default(true)
  status          Status    @default(ACTIVE)
  adminId         Int
  createdAt       DateTime  @default(now())
  admin           Admin     @relation(fields: [adminId], references: [id])
  cashiers        Cashier[]

  @@index([phone])
  @@index([adminId])
  @@index([status])
}

model Cashier {
  id              Int           @id @default(autoincrement())
  phone           String        @unique
  name            String
  password        String
  walletBalance   Float         @default(0)
  debtBalance     Float         @default(0)
  agentPercentage Float         @default(0)
  autoLock        Boolean       @default(true)
  status          Status        @default(ACTIVE)
  agentId         Int
  createdAt       DateTime      @default(now())
  agent           Agent         @relation(fields: [agentId], references: [id])
  reports         Report[]
  winCutTables    WinCutTable[]
  gameSessions    GameSession[] // Added relation to GameSession
  
  // Jackpot settings
  jackpotEnabled        String  @default("Off") // "On" or "Off"
  jackpotPercent        Float   @default(25)
  jackpotStartingAmount Float   @default(200)
  matchGap             Int     @default(5)
  dailyNumber          Int     @default(25)
  isClaimed            Boolean @default(false)

  @@index([phone])
  @@index([agentId])
  @@index([status])
}

model WinCutTable {
  id             Int      @id @default(autoincrement())
  minCards       Int
  maxCards       Int
  percent5to30   Float
  percentAbove30 Float
  cashierId      Int
  createdAt      DateTime @default(now())
  cashier        Cashier  @relation(fields: [cashierId], references: [id], onDelete: Cascade)

  @@unique([cashierId, minCards, maxCards])
  @@index([cashierId])
}

model Report {
  id                   Int      @id @default(autoincrement())
  totalCall            Int
  registeredNumbers    Int
  revenue              Float
  betAmount            Float
  date                 DateTime
  status               Status   @default(ACTIVE)
  cashierId            Int
  createdAt            DateTime @default(now())
  adminCommission      Float    @default(0)
  agentCommission      Float    @default(0)
  cashierCommission    Float    @default(0)
  appliedWinCutPercent Float    @default(0)
  totalBet             Float    @default(0)
  
  // NEW: Track jackpot wins
  jackpotAwarded       Boolean  @default(false)
  jackpotAmount        Float?   // Amount of jackpot won (if any)
  
  cashier              Cashier  @relation(fields: [cashierId], references: [id])

  @@index([cashierId])
  @@index([date])
  @@index([status])
}

// New table for tracking game sessions and jackpot distributions
model GameSession {
  id                Int      @id @default(autoincrement())
  cashierId         Int
  sessionNumber     Int      // Sequential game number for this cashier
  date              DateTime @default(now())
  totalBet          Float    // Total bet amount for this game
  jackpotEligible  Boolean  @default(false) // Whether this game should get jackpot
  jackpotAwarded   Boolean  @default(false) // Whether jackpot was actually given
  jackpotAmount     Float?  // Amount of jackpot given (if any)
  status            String   @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  
  cashier           Cashier  @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  
  @@unique([cashierId, sessionNumber, date])
  @@index([cashierId])
  @@index([date])
  @@index([sessionNumber])
}

enum Status {
  ACTIVE
  INACTIVE
}
